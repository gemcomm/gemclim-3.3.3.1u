!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***S/R MFODQA  -  CALCULE LA DERIVEE SELON T DE QSAT
*              -  (EAU SEULEMENT)
*
#include "phy_macros_f.h"
      SUBROUTINE MFODQA(DQ,TT,PX,LNPS,MODP,NI,NK,N)
*
#include "impnone.cdk"
*
      INTEGER NI, NK, N, MODP
      REAL DQ(NI,NK), TT(NI,NK)
      REAL PX(NK), LNPS(NI,*)
      REAL TEMP1
*
*Author
*          N. Brunet  (Jan91)
*
*Revision
* 001      B. Bilodeau  (August 1991)- Adaptation to UNIX
* 002      B. Bilodeau  (January 2001) - Automatic arrays
*
*Object
*          to calculate the derivative of QSAT(saturation specific
*          humidity) according to T (water phase considered only for
*          all temperatures)
*
*Arguments
*
*          - Output -
* DQ       derivative of QSAT (saturation specific humidity)
*
*          - Input -
* TT       temperature in Kelvins
* PX       see MODP
* LNPS     see MODP
* MODP     pressure mode (SI units only):
*          =0; pressure level in PX
*          =1; sigma level in PX and PS(surface pressure) in LNPS
*          =2; sigma level in PX and logarithm of sigma level in
*          LNPS
*          =3; all points of pressure in LNPS(NI,*) in Pascals
*          =4; sigma level in PX and logarithm of sigma level in
*          LNPS(in millibars unless using SI units)
*          =5; logarithm of pressure level in PX(in millibars unless
*          using SI units)
* NI       horizontal dimension
* NK       vertical dimension
* N        number of points to process
*
*IMPLICITES
#include "consphy.cdk"
*MODULES
      EXTERNAL INCTPHY
**
*--------------------------------------------------------------------
      REAL QS
*
************************************************************************
*     AUTOMATIC ARRAYS
************************************************************************
*
      AUTOMATIC ( PN , REAL , (N) )
*
************************************************************************
*
      INTEGER K, I
#include "dintern.cdk"
#include "fintern.cdk"
*--------------------------------------------------------------------
#include "initcph.cdk"
*
*
      DO 10 K=1,NK
*
#include "modpr2.cdk"
*
      DO 15 I=1,N
         TEMP1 = PN(I)
         QS = FOQSA(TT(I,K),TEMP1)
         DQ(I,K) = FODQA(QS,TT(I,K))
15    CONTINUE
10    CONTINUE
*
*
      RETURN
      CONTAINS
#include "fintern90.cdk"
      END
