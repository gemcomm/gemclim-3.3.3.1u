!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***S/R MHRAHU  -  PASSAGE DE HR A HU
*
#include "phy_macros_f.h"
      SUBROUTINE MHRAHU(HU,HR,TX,PX,LNPS,MODP,SWTT,SWPH,
     $                  NI,NK,N)
#include "impnone.cdk"
*
      INTEGER NI, NK, N, MODP
      REAL HU(NI,NK), HR(NI,NK), TX(NI,NK)
      REAL PX(NK), LNPS(NI,*)
*
      LOGICAL SWTT, SWPH
*
*Author
*          N. Brunet  (Jan91)
*
*Revision
* 001      B. Bilodeau  (August 1991)- Adaptation to UNIX
* 002      N. Brunet (May 1994) - Improved iteration for tx=tv
* 003      B. Bilodeau (January 2001) - Automatic arrays
*
*Object
*          to calculate the specific humidity from relative humidity,
*          temperature and pressure
*
*Arguments
*
*          - Output -
* HU       specific humidity in kg/kg
*
*          - Input -
* HR       relative humidity in fraction
* TX       temperature or virtual temperature in Kelvins
* PX       see MODP
* LNPS     see MODP
* MODP     pressure mode (SI units only):
*          =0; pressure level in PX
*          =1; sigma level in PX and PS(surface pressure) in LNPS
*          =2; sigma level in PX and logarithm of sigma level in
*          LNPS
*          =3; all points of pressure in LNPS(NI,*) in Pascals
*          =4; sigma level in PX and logarithm of sigma level in
*          LNPS(in millibars unless using SI units)
*          =5; logarithm of pressure level in PX(in millibars unless
*          using SI units)
* SWTT     .TRUE. to pass TT for argument
*          .FALSE. to pass TV for argument
* SWPH     .TRUE. to consider water and ice phase
*          .FALSE. to consider water phase only
* NI       horizontal dimension
* NK       vertical dimension
* N        number of treated points
*
*
*IMPLICITES
#include "consphy.cdk"
*MODULES
      EXTERNAL INCTPHY
*
**
*--------------------------------------------------------------------
*
************************************************************************
*     AUTOMATIC ARRAYS
************************************************************************
*
      AUTOMATIC ( PN , REAL , (N) )
*
************************************************************************
*
      REAL E
      REAL TP, TG, HUS
      REAL EPSIL
      INTEGER K, I, ITER, NITER
*
#include "dintern.cdk"
#include "fintern.cdk"
*--------------------------------------------------------------------
#include "initcph.cdk"
*
*
*
      NITER = 25
      EPSIL = 0.001
*
      DO 10 K=1,NK
*
#include "modpr2.cdk"
*
         DO 100 I=1,N
            TP = TX(I,K)
            IF(SWPH)THEN
               E = DMIN1(DBLE(PN(I)),HR(I,K)*FOEW(TP))
            ELSE
               E = DMIN1(DBLE(PN(I)),HR(I,K)*FOEWA(TP))
            END IF
            HUS = FOQFE(E,PN(I))
            TP = FOTTV(TX(I,K),HUS)
            IF(SWTT)THEN
               HU(I,K) = HUS
               GO TO 100
            END IF
            TG = 0.5*(TX(I,K)+TP)
*
            DO 200 ITER=1,NITER
               IF(SWPH)THEN
                  E = DMIN1(DBLE(PN(I)),HR(I,K)*FOEW(TG))
               ELSE
                  E = DMIN1(DBLE(PN(I)),HR(I,K)*FOEWA(TG))
               END IF
               HUS = FOQFE(E,PN(I))
               TP = FOTTV(TX(I,K),HUS)
               IF(ABS(TP-TG) .LT. EPSIL)THEN
                  HU(I,K) = HUS
                  GO TO 100
               END IF
               TG = 0.5 * (TG + TP)
200         CONTINUE
*
         HU(I,K) = HUS
*
100      CONTINUE
10    CONTINUE
*
*
      RETURN
      CONTAINS
#include "fintern90.cdk"
      END
