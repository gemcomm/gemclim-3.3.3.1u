!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
*** S/P LIN_KDIF_SIMP1_AD
      SUBROUTINE LIN_KDIF_SIMP1_AD(D, DSIZ, F, FSIZ, V, VSIZ, NI, NK)
#include "impnone.cdk"
*
      INTEGER DSIZ, FSIZ, VSIZ, NI, NK
      REAL D(DSIZ), F(FSIZ), V(VSIZ)
*
*Author
*     Stephane Laroche - Janvier 2001
*
*Revisions
* 001   S. Laroche          - ADJ of LIN_KDIF_SIMP1 from Yves Delage linear physics
* 002   S. Laroche (May 02) - cleanup diagnostic fields
* 003   S. Laroche (Nov 02) - Implementation of robust near surface diagnostics
* 004   Y. Delage (Oct 03)  - Remove surfcon.cdk
*                      
*
*Object
*          To calculate the (unnormalized) diffusion coefficients KM and KT
*          and the (unnormalized) boundary conditions for the diffusion of
*          wind, temperature, and moisture
*          using simplified physical parameterizations.

*Arguments
*
*          - Input/Output -
* F        field of permanent physics variables
* V        volatile bus
* FSIZ     dimension of F
* VSIZ     dimension of V
*
*          - Input -
* NI       horizontal dimension
* NK       vertical dimension
*
*
*Notes
*    DRAG = false : only a background value of diffusion coefficients
*    DRAG = true  : boundary layer dependent on z0 and on latitude
*    CHAUF= true  : surface heat flux over oceans dependent also on z0t
*    EVAP = true  : evaporation over oceans dependent also on z0t 
*
**
      INTEGER K,I
      REAL lnz0,lnz0t,lnza,lnzu,lnzt,ruv,rtq,ctu
*
*
#include "indx_sfc.cdk"
#include "phy_macros_f.h"
#include "phybus.cdk"
#include "options.cdk"
#include "consphy.cdk"
#include "dintern.cdk"
#include "fintern.cdk"
#include "zuzt.cdk"
*
      integer IK
*     fonction-formule pour l'adressage
      IK(i,k) = (K-1)*NI + I - 1
*
*     **************************** ADJ ******************************
*
      IF (DRAG) THEN
*      
*       CALCUL DES COEFFICIENTS DE DIFFUSION
*
        DO K=1,NK
          DO I=1,NI
            V(KM + IK(I,K)) = 0.0
            V(KT + IK(I,K)) = 0.0
           ENDDO
        ENDDO
*
        DO I=1,NI
*
          V(BM + I-1)  = 0.0
*
*         PROFILS LOGARITHMIQUES POUR NIVEAU DIAGNOSTIQUE
*         ET ADJOINT AU NIVEAU DIAGNOSTIQUE
*
          lnz0  = ALOG(F(Z0+I-1))
          lnz0t = ALOG(F(Z0T+I-1))
          lnza  = ALOG (V(ZA+I-1)+F(Z0+I-1))
          lnzu  = ALOG (ZU + F(Z0+I-1))
          lnzt  = ALOG (ZT + F(Z0+I-1))

          ruv = (lnzu-lnz0)/(lnza-lnz0)
          rtq = ((lnzt-lnz0t)/(lnza-lnz0t))*(1.-NINT(F(MG+I-1)))  

          D(UMOINS + IK(I,NK)) = D(UMOINS + IK(I,NK)) + F(udiag + i-1) * ruv
          D(VMOINS + IK(I,NK)) = D(VMOINS + IK(I,NK)) + F(vdiag + i-1) * ruv
          F(udiag + i-1) = 0.0
          F(vdiag + i-1) = 0.0
*
*         FLUX DE CHALEUR ET TEMPERATURE DIAGNOSTIQUE A Z=ZT
*         FLUX DE VAPEUR ET HUMIDITE DIAGNOSTIQUE A Z=ZT
*         ET ADJOINT AU NIVEAU DIAGNOSTIQUE
*
          V(BT    + I-1)  =  0.0
          V(ALFAT + I-1)  =  0.0
          V(ALFAQ + I-1)  =  0.0
*
*
*         CHOIX PLUS ROBUSTE POUR T ET HU DIAGNOSTIQUE (= AU NIVEAU SUPERIEUR)
*
          D(TMOINS  + IK(I,NK)) = D(TMOINS  + IK(I,NK)) + F(tdiag + i-1)
          D(HUMOINS + IK(I,NK)) = D(HUMOINS + IK(I,NK)) + F(qdiag + i-1)

          F(tdiag + i-1) = 0.0
          F(qdiag + i-1) = 0.0

*
        ENDDO
*
      ENDIF
****************************************************************************
*
      RETURN
      CONTAINS
#include "fintern90.cdk"
      END
