!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
MODULE MM_SEDIMENTATION

!================================================================================!
!  The following subroutines are used by the schemes in the multimoment package. !
!                                                                                !
!  Version package:  2.3.0                                                       !
!  Last modified  :  2007-06-13                                                  !
!================================================================================!

CONTAINS

!=====================================================================================!
 SUBROUTINE SEDI_main_1(QX,cat,T,DE,gamfact,epsQ,afx,bfx,icmx,dmx,dtx,cx6,ckQx1,    &
                      ckQx2,ckQx4,npassx,ni,nk,VxMax,DxMax,DZ,PR,No_x,ktop_sedi)

!-------------------------------------------------------------------------------------!
!  SINGLE-MOMENT version of sedimentation subroutine for categories whose
!  fall velocity equation is V(D) = gamfact * afx * D^bfx
!
!     ** ASSUMES INVERSE-EXPONENTIAL DISTRIBTIONS (alpha_x=0) **
!-------------------------------------------------------------------------------------!

  USE MM_FUNCTIONS
  IMPLICIT NONE

! PASSING PARAMETERS:
  real, dimension(ni,nk), intent(INOUT) :: QX,T
  real, dimension(ni),    intent(INOUT) :: PR
  real, dimension(ni,nk), intent(IN)    :: DE,DZ
  real,    intent(IN)    :: dtx,epsQ,cx6,VxMax,afx,bfx,icmx,dmx,ckQx1,ckQx2,ckQx4,  &
                            DxMax,No_x
  integer, intent(IN)    :: npassx,ni,nk,cat,ktop_sedi

! LOCAL PARAMETERS:
  logical                :: slabHASmass,LOCALLIM,QxPresent
  real, dimension(ni,nk) :: VVQ,VVN,VVZ,RHOQX,gamfact,FLIM
  integer, dimension(ni) :: activeColumn
  real                   :: VqMax,iLAMx,tmp1,tmp2,Dx,iDxMax,No_s,NX,iNo_x
  integer                :: nnn,a,i,k,counter
  real, parameter        :: thrd    = 1./3.
  real, parameter        :: sxth    = 1./6.

!-------------------------------------------------------------------------------------!

  !Determine for which slabs and columns sedimentation should be computes:
   call countColumns(QX,ni,nk,epsQ,counter,activeColumn,slabHASmass,ktop_sedi)

   IF (slabHASmass) THEN

    iNo_x = 1./No_x
    iDxMax= 1./DxMax
!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -!
    DO nnn= 1,npassx

       RHOQX= DE*QX
       VVQ  = 0.;  VqMax= 0.
       do a= 1,counter
         i= activeColumn(a)
!        do k= 1,nk
         do k= ktop_sedi,nk

           QxPresent=  (QX(i,k)>epsQ)
           if (QxPresent) then
            !ice:
              if (cat==2) then
                 NX    = 5.*exp(0.304*(273.15-max(233.,T(i,k))))
                 iLAMx = (ckQx4*QX(i,k)*DE(i,k)/NX)**thrd
            !snow:
              else if (cat==3) then
                 No_s  = min(2.e+8, 2.e+6*exp(-0.12*min(-0.001,T(i,k)-273.15))) !T2004
                 iNo_x = 1./No_s
                 iLAMx = sqrt(sqrt(QX(i,k)*DE(i,k)*icmx*sxth*iNo_x))
            !rain, graupel, hail:
              else
                 iLAMx = sqrt(sqrt(QX(i,k)*DE(i,k)*icmx*sxth*iNo_x))
              endif
              VVQ(i,k) = -gamfact(i,k)*ckQx1*iLAMx**bfx
              VqMax    = max(VxMAX,-VVQ(i,k))
           endif

         enddo  !k-loop
       enddo    !i-loop
       locallim= (nnn==1)
       call blg3sedi(RHOQX,DZ,VVQ,ni,nk,dtx,locallim,VqMax,FLIM,counter,activeColumn, &
                     ktop_sedi)
       QX= RHOQX/DE

       PR(:)= PR(:) - cx6*VVQ(:,nk)*DE(:,nk)*QX(:,nk)

    ENDDO  !nnn-loop
!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -!

   ENDIF  !slabHASmass

 END SUBROUTINE SEDI_main_1

!=====================================================================================!
 SUBROUTINE SEDI_main_2(QX,NX,cat,Q,T,DE,gamfact,epsQ,epsN,afx,bfx,cmx,dmx,dtx,cx6,  &
                        ckQx1,ckQx2,ckQx4,LXP,npassx,ni,nk,VxMax,DxMax,DZ,PR,ktop_sedi)

!-------------------------------------------------------------------------------------!
!  DOUBLE-MOMENT version of sedimentation subroutine for categories whose
!  fall velocity equation is V(D) = gamfact * afx * D^bfx
!-------------------------------------------------------------------------------------!

! Passing parameters:
!
!  VAR   Description
!  ---   ------------
!  QX    mass mixing ratio of category x
!  NX    number concentration of category x
!  cat   hydrometeor category:
!          1:  rain
!          2:  ice
!          3:  snow
!          4:  graupel
!          5:  hail

  USE MM_FUNCTIONS
  IMPLICIT NONE

! PASSING PARAMETERS:
  real, dimension(ni,nk), intent(INOUT) :: QX,NX,Q,T
  real, dimension(ni),    intent(INOUT) :: PR
  real, dimension(ni,nk), intent(IN)    :: DE,DZ
  real,    intent(IN)    :: dtx,epsQ,epsN,cx6,VxMax,LXP,afx,bfx,cmx,dmx,ckQx1,ckQx2, &
                            ckQx4,DxMax
  integer, intent(IN)    :: npassx,ni,nk,cat,ktop_sedi

! LOCAL PARAMETERS:
  logical                :: slabHASmass,LOCALLIM,QxPresent
  real, dimension(ni,nk) :: VVQ,VVN,VVZ,RHOQX,gamfact,FLIM
  integer, dimension(ni) :: activeColumn
  real                   :: VqMax,VnMax,Vzmax,iLAMx,iLAMxB0,tmp1,tmp2,Dx,iDxMax
  integer                :: nnn,a,i,k,counter
  real, parameter        :: thrd  = 1./3.
!-------------------------------------------------------------------------------------!

  !Determine for which slabs and columns sedimentation should be computes:
   call countColumns(QX,ni,nk,epsQ,counter,activeColumn,slabHASmass,ktop_sedi)

   IF (slabHASmass) THEN

    iDxMax= 1./DxMax
!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -!
    DO nnn= 1,npassx

       RHOQX  = DE*QX
       VVQ= 0.;  VVN= 0.;  VVZ= 0.;  VqMax= 0.;  VnMax= 0.;  VzMax= 0.
       do a= 1,counter
         i= activeColumn(a)
!        do k= 1,nk
         do k= ktop_sedi,nk

           QxPresent=  (QX(i,k)>epsQ .and. NX(i,k)>epsN)
           if (QxPresent) then
              iLAMx    = ((QX(i,k)*DE(i,k)/NX(i,k))*ckQx4)**thrd
              iLAMxB0  = iLAMx**bfx
              tmp1     = -gamfact(i,k)*iLAMxB0
              VVQ(i,k) = tmp1*ckQx1;   VqMax= max(VxMAX,-VVQ(i,k))
              VVN(i,k) = tmp1*ckQx2;   VnMax= max(VxMAX,-VVN(i,k))
           endif

         enddo  !k-loop
       enddo    !i-loop
       locallim= (nnn==1)
       call blg3sedi(RHOQX,DZ,VVQ,ni,nk,dtx,locallim,VqMax,FLIM,counter,activeColumn, &
                     ktop_sedi)
       call blg3sedi(NX   ,DZ,VVN,ni,nk,dtx,locallim,VnMax,FLIM,counter,activeColumn, &
                     ktop_sedi)
       QX= RHOQX/DE

    ! Prevent levels with zero N and nonzero Q and size-limiter:
       do a= 1,counter
         i=activeColumn(a)
!        do k= 1,nk
         do k= 1+ktop_sedi,nk
           QxPresent=  (QX(i,k)>epsQ .and. NX(i,k)>epsN)
           if (QxPresent) then    !size limiter
              Dx= (DE(i,k)*QX(i,k)/(NX(i,k)*cmx))**thrd
              if (cat==1 .and. Dx>3.e-3) then
                 tmp1   =  Dx-3.e-3;   tmp1= tmp1*tmp1
                 tmp2   = (Dx/DxMAX);  tmp2= tmp2*tmp2*tmp2
                 NX(i,k)= NX(i,k)*max((1.+2.e4*tmp1),tmp2)
              else
                 tmp1   = max(Dx,DxMAX)*iDxMAX
                 NX(i,k)= NX(i,k)*tmp1*tmp1*tmp1
              endif
           else   !here, "QxPresent" implies correlated QX and NX
              Q(i,k) = Q(i,k)+QX(i,k)
              T(i,k) = T(i,k) - LXP*QX(i,k)   !LCP for rain; LSP for i,s,g,h
              QX(i,k)= 0.
              NX(i,k)= 0.
           endif

         enddo
       enddo

       PR(:)= PR(:) - cx6*VVQ(:,nk)*DE(:,nk)*QX(:,nk)

    ENDDO  !nnn-loop
!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -!

   ENDIF  !slabHASmass

 END SUBROUTINE SEDI_main_2
!=====================================================================================!
 SUBROUTINE countColumns(QX,ni,nk,minQX,counter,activeColumn,slabHASmass,ktop_sedi)

! Searches the hydrometeor array QX(ni,nk) for non-zero (>minQX) values.
! Returns slabHASmass=TRUE if there is a single non-zero value in the array
! and returns the array if i-indices (activeColumn) for the columns (i)
! which contain at least one non-zero value, as well as the number of such
! columns (counter).

 IMPLICIT NONE

 ! PASSING PARAMETERS:
  integer, intent(IN)                   :: ni,nk,ktop_sedi
  integer, intent(OUT)                  :: counter
  integer, dimension(ni), intent(OUT)   :: activeColumn
  real,    dimension(ni,nk), intent(IN) :: QX
  real,    intent(IN)                   :: minQX
  logical, intent(OUT)                  :: slabHASmass

! LOCAL PARAMETERS:
   integer :: i,k

   k=ktop_sedi-1; counter=0; activeColumn=0; slabHASmass=.false.
!  k=0; counter=0; activeColumn=0; slabHASmass=.false.
   do i=1,ni

      do
         k=k+1
         if (QX(i,k)>minQX) then
            counter=counter+1
            activeColumn(counter)=i
            slabHASmass=.true.
            k=0
            exit
         else
            if (k==nk) then
               k=0
               exit
            endif
         endif
      enddo

   enddo  !i-loop


 END SUBROUTINE countColumns

!=====================================================================================!
!This subroutine is modified from S/P BLG.FTN

 SUBROUTINE blg3sedi (RO,DZ,WW,NI,NK,DT,COMPLIM,WMAX,FLIM,counter,activeColumn,ktop_sedi)

#include "impnone.cdk"

 INTEGER NI,NK,counter
 REAL    RO(NI,NK),DZ(NI,NK),WW(NI,NK),DT,WMAX,FLIM(NI,NK)
 INTEGER activeColumn(NI)
 LOGICAL COMPLIM
 INTEGER, intent(IN) :: ktop_sedi

!Author
!          C. Girard and A. Plante (2001)
!
!Revision
!
! 001      A. Glazer and A. Plante (Oct 2001) - Introduce complim,
!          and ind_limit in computation of precipitation
! 002      A. Plante (June 2003)
!             - IBM conversion, added ro_star. This imporved sedimentaion
!               in mixphase4 by 38%.
!             - change computation limit to insure reentrance in OpenMP
!             - blg2.ftn validates perfectly with blg.ftn of PHY 3.8.
! 003      J. Milbrandt (Nov 2004)
!             - Modified for use in Milbrandt-Yau microphysics scheme
!               + add condition for mass-in-column (activeColumn); for all i-loops, the
!                 line 'do i=1,ni' was replaced with 'do a=1,counter' & 'i=activeColumn(a)'
!               + remove RT calculation (and pass)
!               + hard-wired various options for multimoment.ftn90 (removed unnecessary IF statements)
! 004      J. Milbrandt (Jan 2007)
!             - corrected 'idzmin' initial value (for use in activeColumn i-loops)
!             - added option to exclude upper levels (ktop_sedi)
!
! Object
!
!
!   Version 1.0
!
!   CALCULATES
!                sedimentation of a quantity of matter ro(kg/m3)
!                falling with negative downward velocity ww(m/s)
!
!   ACCORDING TO
!                the BOX-LAGRANGIAN SCHEME
!                         (Kato,1995:JMSJ,73,241-245)
!             OR
!                the ADJACENT-LAGRANGIAN SCHEME
!                Girard and Plante
!
!   PLUS
!                a conservative two-grid-length filter
!                in order to control noise if needed
!
!Arguments
!
!          - Input/Output -
!
! RO       density in cell before and after sedimentation.
!
!          - Output -
!
! RT       precipitation reaching the surface.
!
!          - Input -
!
! DZ       cell thickness
! WW       vertical velocity (negative downward)
! NI       number of profiles
! NK       number of grid point in profiles
! DT       timestep
! COMPLIM  logical switch to force recomputing the table FLIM
! KF       number of filtering pass
! FLIM     index of hier grid point where to look for mass in sedimentation.
!          Note that only collumn FLIM(1,*) is used.
! WMAX     maximum vertical velocity (positive or negative value).
!          This is used to save computation time. For each
!          level, the index of the heighest level from which
!          mass can be received will be computed if COMPLIM is .true.
! IDIR           direction of index:
!                idir=0 if index one is at top of model
!                idir=1 if index one is at surface of model
! ktop_sedi      uppermost level below which sedimentation is computed
! COUNTER        number of columns in (ni,nk) slab with non-zero RO
! ACTIVECOLUMN   array of i-indices with non-zero columns in RO(ni,nk)
! N_EXLC         number of upper-levels to be excluded

#include "maxlev.cdk"

 character*6 scheme
 integer i,k,l,km1,kp1,ks,ke,kw,a
 real vp(ni,nk),zt(ni,nk),zb(ni,nk),dzi(ni,nk),one
!real zz(ni,idir:nk+idir),ro_star(ni,nk)  !used if idir is passed (orig)
 real zz(ni,  0 :nk     ),ro_star(ni,nk)  !for hard-wired idir=0  (mod, JAM)
 real zmax,tempo,epsilon
 parameter(one=1.,epsilon=1e-2)
 integer idzmin

!scheme='kato'
 scheme='girard'

!---------------------------------------------------------------------------
!     Set parameters related to index direction.

!       ks=1
!       ke=nk
!       kw=1
!       if(idir.eq.0)then
!          ks=nk
!          ke=1
!          kw=-1
!       endif

  !For nk=bottom:  (hard-wired to remove pass of 'idir' parameter)
         ks=  nk
!        ke=  1
         ke=  ktop_sedi
         kw= -1
!---------------------------------------------------------------------------
!     Compute cell height,
!         and final position of the top (zt) and bottom (zb) of moving boxes.
!     Initialise rt and vp.

!       do i=1,ni
!          rt(i)=0.
!       enddo

!     do i=1,ni
      do a= 1,counter
         i=activeColumn(a)
         zz(i,ks)=0.
      enddo
      do k=ks,ke,kw
!        do i=1,ni
         do a= 1,counter
            i=activeColumn(a)
            zz (i,k+kw)=zz(i,k)+dz(i,k)
            dzi(i,k)=one/dz(i,k)
            vp (i,k)=0.
         enddo
      enddo

      do k=ks,ke,kw
!     do k=1,nk
        !do i=1,ni
         do a= 1,counter
            i=activeColumn(a)
            zb(i,k)=zz(i,k)+ww(i,k)*dt
         enddo
      enddo

!       if(scheme.eq.'kato')then
! c        print*,'Kato'
! c        Note that this scheme reproduce the Eulerians scheme if CFL<1.
!          do k=1,nk
!             do i=1,ni
!                zt(i,k)=zb(i,k)+dz(i,k)
!             enddo
!          enddo
!       endif

!       if(scheme.eq.'girard')then

!        Note that this scheme DOES NOT reproduce the Eulerians scheme.
        !do i=1,ni
         do a= 1,counter
            i=activeColumn(a)
            zt(i,ke)=zb(i,ke)+dz(i,ke)
         enddo
         do k=ks,ke-kw,kw
           !do i=1,ni
            do a= 1,counter
               i=activeColumn(a)
               zb(i,k)=min(zb(i,k+kw)-epsilon*dz(i,k),zz(i,k)+ww(i,k)*dt)
               zt(i,k)=zb(i,k+kw)
            enddo
         enddo

!       endif

! The following replaces the three following loops:
! (With use of i=activeColumn(a), it is unclear how columns in ro_star(i,k)
!  will be used. Thus, the calculation cannot be broken up to enable use
!  of 'vsdiv' subroutine.)   JAM
      do k=ks,ke,kw
!     do k=1,nk
        !do i=1,ni
         do a= 1,counter
            i=activeColumn(a)
            ro_star(i,k)= ro(i,k)*dz(i,k)/(zt(i,k)-zb(i,k))
         enddo
      enddo

! c     Compute density in original cell before remapping (ro_star):
! c     ro(i,k) * dz(i,k)/(zt(i,k)-zb(i,k))
!
!       do k=1,nk
!         !do i=1,ni
!          do a= 1,counter
!             i=activeColumn(a)
!             ro_star(i,k)=zt(i,k)-zb(i,k)
!          enddo
!       enddo

!****************
!     call vsdiv(ro_star,dz,ro_star,ni*nk)
!!     ro_star= dz/ro_star  !JAM (if 'massvp4' not included in -libappl)
!  The above approach does not work with use of activeColumn due to DIV-BY-ZERO.
!  Replaced with the following:     (JAM)
!       do k=1,nk
!         !do i=1,ni
!          do a= 1,counter
!             i=activeColumn(a)
!             ro_star(i,k)= dz(i,k)/ro_star(i,k)
!          enddo
!       enddo
!  (The above loop could be removed and the re-calculation of ro_star moved to the
!  loop above.)
!****************

!       do k=1,nk
!         !do i=1,ni
!          do a= 1,counter
!             i=activeColumn(a)
!             ro_star(i,k)=ro(i,k)*ro_star(i,k)
!          enddo
!       enddo
!  (The above calc could be relocated to the "Compute density.." loop above)
!---------------------------------------------------------------------------

      if(complim)then

!        Compute limit index where to look for mass.

!        Find domain tightest levels.
      !  idzmin=1
         idzmin= activeColumn(1)
         tempo=dz(1,ks)
        !do i=2,ni
         do a= 2,counter
            i=activeColumn(a)
            if(dz(i,ks).lt.tempo)then
               tempo=dz(i,ks)
               idzmin=i
            endif
         enddo

         zmax=abs(wmax*dt)

         do l=ks,ke,kw
            flim(1,l)=float(l)
            do k=l,ke,kw
               if (zmax.ge.zz(idzmin,k)-zz(idzmin,l+kw)) flim(1,l)=float(k)
            enddo
         enddo

      endif

!---------------------------------------------------------------------------
!     Compute sedimentation, store in vp.

      do l=ks,ke,kw
!     do l=1,nk
         do k=l,nint(flim(1,l)),kw
           !do i=1,ni
            do a= 1,counter
               i=activeColumn(a)
               vp(i,l)= vp(i,l) + ro_star(i,k)*max( 0.,min(zz(i,l+kw),zt(i,k)) &
                         - max(zz(i,l),zb(i,k)) )

            enddo
         enddo
      enddo

!---------------------------------------------------------------------------
!     Compute precipitation.

!       do k=ks,nint(flim(1,ks)),kw
!          do i=1,ni
!             rt(i)=rt(i)+ro(i,k)*
!      $           max( 0. , min(zz(i,ks),zt(i,k)) - (zt(i,k)-dz(i,k)) )
!          enddo
!       enddo

!---------------------------------------------------------------------------
!     Update density.

      do k=ks,ke,kw
!     do k=1,nk
        !do i=1,ni
         do a= 1,counter
            i=activeColumn(a)
            ro(i,k)=vp(i,k)*dzi(i,k)
         enddo
      enddo

!---------------------------------------------------------------------------
!     Apply conservative two-grid-length filter

!     Loop on filter pass
!       do l=1,kf
!
!          do k=1,nk
!             kp1=min(k+1,nk)
!             km1=max(k-1,1)
!             do i=1,ni
!                vp(i,k) = ro(i,k) +
!      $              0.25*((ro(i,kp1)-ro(i,k))-
!      $              (ro(i,k)-ro(i,km1))*(dz(i,km1)*dzi(i,k)))
!             enddo
!          enddo
!
!          do k=1,nk
!             do i=1,ni
!                ro(i,k)=vp(i,k)
!             enddo
!          enddo
!
!       enddo
!---------------------------------------------------------------------------

 return
 END SUBROUTINE blg3sedi

!=====================================================================================!

END MODULE MM_SEDIMENTATION
