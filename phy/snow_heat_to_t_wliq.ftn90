!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!          ###########################################
SUBROUTINE SNOW_HEAT_TO_T_WLIQ_1D(PHEAT,PRHO,PT,PWLIQ)
!          ###########################################
!
USE MODD_SURF_PAR,   ONLY : XUNDEF
USE MODD_CSTS,       ONLY : XTT, XLMTT
USE MODE_SNOW3L
!
IMPLICIT NONE
!
!
!
!*      0.1    declarations of arguments
!
REAL, DIMENSION(:), INTENT(IN)           :: PHEAT  ! snow heat density        (J/m3)
REAL, DIMENSION(:), INTENT(IN)           :: PRHO   ! snow density             (kg/m3)
REAL, DIMENSION(:), INTENT(OUT)          :: PT     ! snow temperature profile (K)
REAL, DIMENSION(:), INTENT(OUT), OPTIONAL:: PWLIQ  ! liquid water profile     (kg/m3)
!
!
!*      0.2    declarations of local variables
!
!---------------------------------------------------------------------------
!
PT = XUNDEF
IF (PRESENT(PWLIQ)) PWLIQ = XUNDEF
!
!* temperature from heat
!
WHERE(PRHO/=XUNDEF) PT = XTT + (PHEAT + XLMTT*PRHO) / SNOW3LSCAP(PRHO)
!
!* effect of liquid water
!
IF (PRESENT(PWLIQ)) THEN
  WHERE(PRHO/=XUNDEF) PWLIQ = (PT-XTT) * SNOW3LSCAP(PRHO) / XLMTT
END IF
!
!* physical limits
!
IF (PRESENT(PWLIQ)) THEN
  PT = MIN(XTT,PT)
  PWLIQ = MAX(0.,PWLIQ)
  PWLIQ = MIN(SNOW3LWLIQMAX(PRHO),PWLIQ)
END IF
!
!---------------------------------------------------------------------------
!
END SUBROUTINE SNOW_HEAT_TO_T_WLIQ_1D
!
!          ###########################################
SUBROUTINE SNOW_HEAT_TO_T_WLIQ_2D(PHEAT,PRHO,PT,PWLIQ)
!          ###########################################
!
USE MODD_SURF_PAR,   ONLY : XUNDEF
USE MODD_CSTS,       ONLY : XTT, XLMTT
USE MODE_SNOW3L
!
IMPLICIT NONE
!
!
!
!*      0.1    declarations of arguments
!
REAL, DIMENSION(:,:), INTENT(IN)           :: PHEAT  ! snow heat density        (J/m3)
REAL, DIMENSION(:,:), INTENT(IN)           :: PRHO   ! snow density             (kg/m3)
REAL, DIMENSION(:,:), INTENT(OUT)          :: PT     ! snow temperature profile (K)
REAL, DIMENSION(:,:), INTENT(OUT), OPTIONAL:: PWLIQ  ! liquid water profile     (kg/m3)
!
!
!*      0.2    declarations of local variables
!
!---------------------------------------------------------------------------
!
PT = XUNDEF
IF (PRESENT(PWLIQ)) PWLIQ = XUNDEF
!
!* temperature from heat
!
WHERE(PRHO/=XUNDEF) PT = XTT + (PHEAT + XLMTT*PRHO) / SNOW3LSCAP(PRHO)
!
!* effect of liquid water
!
IF (PRESENT(PWLIQ)) THEN
  WHERE(PRHO/=XUNDEF) PWLIQ = (PT-XTT) * SNOW3LSCAP(PRHO) / XLMTT
END IF
!
!* physical limits
!
IF (PRESENT(PWLIQ)) THEN
  PT = MIN(XTT,PT)
  PWLIQ = MAX(0.,PWLIQ)
  PWLIQ = MIN(SNOW3LWLIQMAX(PRHO),PWLIQ)
END IF
!
!---------------------------------------------------------------------------
!
END SUBROUTINE SNOW_HEAT_TO_T_WLIQ_2D
!
!          ###########################################
SUBROUTINE SNOW_HEAT_TO_T_WLIQ_3D(PHEAT,PRHO,PT,PWLIQ)
!          ###########################################
!
USE MODD_SURF_PAR,   ONLY : XUNDEF
USE MODD_CSTS,       ONLY : XTT, XLMTT
USE MODE_SNOW3L
!
IMPLICIT NONE
!
!
!
!*      0.1    declarations of arguments
!
REAL, DIMENSION(:,:,:), INTENT(IN)           :: PHEAT  ! snow heat density        (J/m3)
REAL, DIMENSION(:,:,:), INTENT(IN)           :: PRHO   ! snow density             (kg/m3)
REAL, DIMENSION(:,:,:), INTENT(OUT)          :: PT     ! snow temperature profile (K)
REAL, DIMENSION(:,:,:), INTENT(OUT), OPTIONAL:: PWLIQ  ! liquid water profile     (kg/m3)
!
!
!*      0.2    declarations of local variables
!
!---------------------------------------------------------------------------
!
PT = XUNDEF
IF (PRESENT(PWLIQ)) PWLIQ = XUNDEF
!
!* temperature from heat
!
WHERE(PRHO/=XUNDEF) PT = XTT + (PHEAT + XLMTT*PRHO) / SNOW3LSCAP(PRHO)
!
!* effect of liquid water
!
IF (PRESENT(PWLIQ)) THEN
  WHERE(PRHO/=XUNDEF) PWLIQ = (PT-XTT) * SNOW3LSCAP(PRHO) / XLMTT
END IF
!
!* physical limits
!
IF (PRESENT(PWLIQ)) THEN
  PT = MIN(XTT,PT)
  PWLIQ = MAX(0.,PWLIQ)
  PWLIQ = MIN(SNOW3LWLIQMAX(PRHO),PWLIQ)
END IF
!
!---------------------------------------------------------------------------
!
END SUBROUTINE SNOW_HEAT_TO_T_WLIQ_3D
