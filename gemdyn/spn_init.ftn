!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r spn_init - Initializes the spectral nudging work fields
#include "model_macros_f.h"
      subroutine spn_init 
!
      USE MODD_SPN
      implicit none
!
!author
!     Minwei Qian - UQAM/CRCMD
!
!revision
! v3_32 - Qian M.           - initial version
! v3_33 - Qian M.           - version 2.0: adjust for new spectral
!                             nudging scheme based on "transposes"
! v3_33 - Dugas B.          - nudging coefficient applied in a 2D manner
!                             so that fxy(:,:) replaces fxx(:) and fyy(:)
!
!object
!     Initializes the spectral nudging work fields
!
!implicits
#include "lun.cdk"
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "grd.cdk"
#include "lam.cdk"
#include "dcst.cdk"
#include "ptopo.cdk"
#include "cstv.cdk"
#include "ldnh.cdk"
#include "geomg.cdk"
!
      integer k,err1
      real t_turn, b_turn, pi2, nudging_tau

      pi2 = atan( 1.0_8 )*2.

      if (.not.G_lam) Lam_spn_nudging_S = ' '
      if (Lam_spn_nudging_S == ' ') return

      call up2low( Lam_spn_nudging_S,Lam_spn_nudging_S )
      call low2up( Lam_spn_trans_shape_S,Lam_spn_trans_shape_S )

      if (Lun_out > 0) write(Lun_out,1000) Lam_spn_nudging_S

      ! Allocate once and for all

      allocate( prof(G_nk), \
                fxy(G_ni+2,G_nj+2), \
                Ldiff3D(ldnh_minx:ldnh_maxx,ldnh_miny:ldnh_maxy,G_nk-1), stat=err1 )

      if (err1 > 0) call gem_stop( 'spn_init',-1 )

      call spn_calfiltre2 (G_ni-Lam_pil_w-Lam_pil_e, \
                           G_nj-Lam_pil_s-Lam_pil_n)

      prof=0.

      ! nudging_tau is nudging time scale in hours
      ! t_turn and b_turn are top and bottom turnning points

      t_turn= max( Lam_spn_up_const_lev,Geomg_hybm(   1  ) )
      b_turn= min( Lam_spn_start_lev   ,Geomg_hybm(G_nk-1) )
      nudging_tau = Lam_spn_relax_hours

      if (Lam_spn_trans_shape_S == 'COS2' ) then

         do k=1,G_nk
            if (Geomg_hybm(k) <= b_turn .and. Geomg_hybm(k) >= t_turn) then
               prof(k) = cos(pi2-pi2*(b_turn-Geomg_hybm(k)) \
                       /        (b_turn-t_turn))
            elseif (Geomg_hybm(k) < t_turn) then
               prof(k)=1.
            else
               prof(k)=0.
            endif
            prof(k) = prof(k)*prof(k)
         enddo


      elseif (Lam_spn_trans_shape_S == 'LINEAR' ) then

         do k=1,G_nk
            if (Geomg_hybm(k) <= b_turn .and. Geomg_hybm(k) >= t_turn) then
               prof(k) =  (b_turn-Geomg_hybm(k)) \
                       /      (b_turn-t_turn)
            elseif (Geomg_hybm(k) < t_turn) then
               prof(k)=1.
            else
               prof(k)=0.
            endif
         enddo

      else

         if (Lun_out > 0) write(Lun_out,1001) Lam_spn_trans_shape_S
         call gem_stop( 'spn_init',-2 )

      endif

      do k=1,G_nk
         prof(k) = prof(k) * Cstv_dt_8/3600./nudging_tau
      enddo

 1000 format(/' In SPN_INIT, Lam_spn_nudging_S = ',A/)
 1001 format(/' In SPN_INIT, unknown Lam_spn_trans_shape_S ',A/)

      end subroutine spn_init
