!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
** s/r e_intgeo  Read geophysic fields and interpolate on model grid.
*
#include "model_macros_f.h"
*
      logical function e_intgeo ()
      implicit none
*
*author
*     Michel Desgagne - January 2001
*
*revision
* v2_21 - Desgagne M.      - initial version
* v3_00 - Desgagne & Lee   - Lam configuration
* v3_21 - Lee V.           - collect errors while searching geophy fields
* v3_30 - Desgagne M.      - new physics interface
* v3_30 - Larocque R.      - Added support for reading mosaic fields
* v3_31 - Bilodeau & Lee   - Correction for offline mode
* v3_32 - Duarte L.        - If DPTH can't be found, set values to -10 and proceed
*                          - Fill missing levels in SANDEN, CLAYEN, WSOILEN,
*                            TSOILEN and ISOILEN with -10
* v3_32 - Dugas B.         - Fill any missing levels in SNODPEN with first one found    
* v3_33 - Martynov A.      - Treat fields for 1D interactive lakes
*
*implicites
#include "e_fu.cdk"
#include "e_grids.cdk"
#include "itf_phy_buses.cdk"
#include "e_cdate.cdk"
#include "hgc.cdk"
#include "e_schm.cdk"
*
**
      integer e_rdhint3,e_moclim2
      external e_rdhint3,e_moclim2
*
      real value
      character*4 nv
      character*8 etk,typ,interp,seq,dum
      logical anyip,haszero,hasothers
      integer ivar, im, i, longueur, unf, indx,zindx, ip1,ip2, iniv, mos
      integer, dimension (:), allocatable :: geoerr
*
*----------------------------------------------------------------------
*
      allocate (geoerr(p_bgeo_top))
      geoerr = -1
*
*     Loop on variables in geobus 
*
      write (6,1000)
      do ivar = 1, p_bgeo_top
         iniv = 1
         nv    = geonm(ivar,2)
         if (nv.ne.'00') then
            etk   = geonm(ivar,3)
            typ   = geonm(ivar,4)
            interp= geonm(ivar,5)
            seq   = geonm(ivar,6)
            write(6,1001) nv,etk,typ,interp,seq
 670        if ((seq(1:1).ne."V").and.(seq(1:4).ne." ")) then
               unf = e_fu_anal
               if (seq(1:1).eq."C") unf = e_fu_climat
               if (seq(1:1).eq."G") unf = e_fu_geophy
               ip2 = -1
               anyip = .false.
               if (seq(1:1).eq."C") then
                  ip2 = month
                  if (nv.eq.'AL') anyip = .true.
               endif
               if (geopar(ivar,4).gt.1) then
                   haszero = .true.
                   hasothers = .true.
                   do mos = 0, geopar(ivar,4)-1
                       do im=1,geopar(ivar,3)
                           ip1 = -1
                           if (geopar(ivar,3).gt.1 .and. mos.gt.0) then
                              value = real( im )+ real( mos )/100.
                              call convip ( ip1, value, 3, 1, dum, .false. )
                           endif
                           zindx =          geopar(ivar,1)
     $                           + (im-1) *                  nifi*njfi
                           indx  = zindx
     $                           +  mos   * geopar(ivar,3) * nifi*njfi
                           geoerr(ivar) = e_rdhint3(geobus(indx),dstf_gid,
     $                          nifi,njfi,nv,ip1,ip2,-1,etk,typ,anyip,
     $                          .false.,interp,unf,6)
                           if (geoerr(ivar).lt.0.and.mos.eq.0) then
                                print*,'mos: 0 not found'
                                print*,'will expect all others to be non-empty'
                                haszero = .false.
                                do i=0,nifi*njfi-1
                                    geobus(indx+i)=0.
                                end do
                           elseif (geoerr(ivar).lt.0.and.haszero) then
                                print*,'mos:', mos, 'not found'
                                print*,'replacing with mos=0 values'
                                hasothers = .false.
                                do i=0,nifi*njfi-1
                                    geobus(indx+i)=geobus(zindx+i)
                                end do
                           elseif (geoerr(ivar).lt.0.and..not.haszero) then
c      no averaged field (0) and missing a level
                               print*,'reading mosaic var ', nv, ' failed'
                               seq = seq(2:longueur(seq))
                               iniv = im 
                               goto 670
                           endif
                       end do
                   end do
               else
                  do im=1,geopar(ivar,3)
                     ip1 = -1
                     if (geopar(ivar,3).gt.1) 
     $                    call convip ( ip1, real(im), 3, 1, dum, .false. )
                     indx = geopar(ivar,1) + (im-1)*nifi*njfi
                     geoerr(ivar) = e_rdhint3(geobus(indx),dstf_gid,nifi,njfi,
     $                    nv,ip1,ip2,-1,etk,typ,anyip,.false.,interp,unf,6)
                     if (geoerr(ivar).lt.0) then
                        seq = seq(2:longueur(seq))
                        iniv = im 
                        goto 670
                     endif
                  end do
               endif
            elseif (seq(1:1).eq."V") then
               do im=iniv,geopar(ivar,3)
                  ip1 = -1
                  if (geopar(ivar,3).gt.1) 
     $                 call convip ( ip1, real(im), 3, 1, dum, .false. )
                  indx = geopar(ivar,1) + (im-1)*nifi*njfi
                  geoerr(ivar) =  e_moclim2 (geobus(indx),nifi,njfi,nv,
     $                           ip1,-1,month, day,' ',' ',dstf_gid,
     $                                         interp,e_fu_climat,6)
                  if (geoerr(ivar).lt.0) then
                        seq = " "
                        iniv = im 
                        goto 670
                  endif
               end do
            endif
         else
            geoerr(ivar) = 0
         endif
*
         if (geoerr(ivar).lt.0) then
            zindx = geopar(ivar,1)
            if (nv.eq.'DPTH') then
               do i=0,nifi*njfi-1
                  geobus(zindx+i)=-10.0
               end do
               geoerr(ivar) = 0
            elseif (nv.eq.'LDPT') then
               do i=0,nifi*njfi-1
                  geobus(zindx+i)=30.0
               end do
               geoerr(ivar) = 0
            elseif (nv.eq.'LTRN') then
               do i=0,nifi*njfi-1
                  geobus(zindx+i)=0.0
               end do
               geoerr(ivar) = 0
            else if (iniv.gt.1) then
               if ((nv.eq.'SAND').or.(nv.eq.'CLAY').or.
     $             (nv.eq.'I0')  .or.(nv.eq.'I1')  .or.
     $             (nv.eq.'I2')) then
                  do im=iniv,geopar(ivar,3)
                     indx = zindx + (im-1)*nifi*njfi
                     do i=0,nifi*njfi-1
                        geobus(indx+i)=-10.0
                     end do
                  enddo
                  geoerr(ivar)=0
               else if ((nv.eq.'SD')) then
                  do im=iniv,geopar(ivar,3)
                     indx = zindx + (im-1)*nifi*njfi
                     do i=0,nifi*njfi-1
                        geobus(indx+i)=geobus(zindx+i)
                     end do
                  enddo
                  geoerr(ivar)=0
               end if
            end if
         end if
      end do
*
      print*
      e_intgeo = .true.
      do ivar = 1, p_bgeo_top
         if (geoerr(ivar).lt.0) then
            e_intgeo = .false.
            write (6,1005) geonm(ivar,2)
         endif
      end do
*
 1000 format (/' PROCESSING EVERY ELEMENT IN GEOBUS:')
 1001 format (/'====>',' Processing ',a4,4a8,' <====')
 1005 format (' GEOPHYSICAL FIELD: ',a,' NOT AVAILABLE !!!')
*
*----------------------------------------------------------------------
*
      return
      end
