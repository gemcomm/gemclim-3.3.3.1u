!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r out_anal_thm - output temperature, phis and surface pressure in analysis file
*
#include "model_macros_f.h"
*
      subroutine out_anal_thm(F_fit1,F_tt1,F_st1,F_qh,F_hut1,F_wlnph,
     %                        F_ninj,F_nk,F_indo,F_nko)
*
      implicit none
*
      integer F_nk,F_ninj,F_nko,F_indo(*)

      real F_fit1(F_ninj,F_nk),  F_tt1(F_ninj,F_nk),
     %     F_qh (F_ninj,F_nk),   F_hut1(F_ninj,F_nk),
     %     F_wlnph(F_ninj,F_nk), F_st1(F_ninj)
   
*
*author
*     Katja Winger - UQAM/RPN Sep 2009
*
*     Writes P0, surface GZ and 3-D TT into analysis file
*     This routine is based on the rountine out_thm from James Caveen,
*     Andre Method and Vivian Lee
*
*revision
* v3_32 - Winger K.         - initial version
* v3_32 - Winger K.         - Set level type of GZ and TT to hybrid (5) (Jun 2010)
*
*object
*     See above id.
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
*
*implicits
*
#include "glb_ld.cdk"
#include "dcst.cdk"
#include "out3.cdk"
#include "geomg.cdk"
#include "out.cdk"
*
**
      integer i,j,k,kl,ii,vtype
      real    lev2d
      real    w1(F_ninj)     , w2(F_ninj,F_nk)
      real    tt(F_ninj,F_nk), vt(F_ninj,F_nk)
      real, dimension(:,:), pointer :: gz
*
* ___________________________________________________________________
*
*     Initialization of data
* ___________________________________________________________________
*
*     initialize conversion of units
*
      real    prmult_pngz
      real    pradd_pntt
*
      prmult_pngz  = 0.1 / Dcst_grav_8
      pradd_pntt   = -Dcst_tcdk_8
*
      if (abs( Out3_2DLev-1.0 ) < 0.000001 ) then
         lev2d = 1.0 ; vtype = 5
      else
         lev2d = 0.0 ; vtype = 2
      endif
*
*C    Fill non-initialized values in halo area
      call out_padbuf(F_tt1,l_minx,l_maxx,l_miny,l_maxy,F_nk)
      call out_padbuf(F_hut1,l_minx,l_maxx,l_miny,l_maxy,F_nk)
      call out_padbuf(F_wlnph,l_minx,l_maxx,l_miny,l_maxy,F_nk) 
      call out_padbuf(F_fit1,l_minx,l_maxx,l_miny,l_maxy,F_nk)
*
* ___________________________________________________________________
*
*C    Compute Virtual temperature
*     With water loading
      call mfottvh (w2,F_tt1,F_hut1,F_qh,F_ninj,F_nk,F_ninj)
      do k=1,l_nk
         do i=1,F_ninj
            vt (i,k) = F_tt1(i,k) + w2(i,k) * F_qh(i,k)
         enddo
      enddo
*
      call out_padbuf(vt,l_minx,l_maxx,l_miny,l_maxy,F_nk) 
*
*C    Compute Geopotential Height (GZ)
      allocate ( gz(F_ninj,F_nk) )
*
      do k=1,l_nk
      do i=1,F_ninj
         gz (i,k) = F_fit1(i,k)
      enddo
      enddo
*
      if ( Out3_vt2gz_L ) then
*C         Compute hydrostatic GZ from P0 and VT
           call p0vt2gz_hyb (gz,geomg_pia,geomg_pib,F_st1,
     $                          F_tt1,F_ninj,l_nk,.true.,.false.)
      endif
*
* ___________________________________________________________________
*
*     Output P0
* ___________________________________________________________________
*
*
*     Calculate P0
      do i= 1, F_ninj
         w1(i) = exp(F_wlnph(i,l_nk))
      enddo
*
      call ecris_fst2(w1,l_minx,l_maxx,l_miny,l_maxy,lev2d,
     $               'P0  ',.01,0.0,vtype,1, 1, 1, Out3_nbitg )
*
* ___________________________________________________________________
*
*     Output derived surface GZ and 3-D TT on ETA levels
* ___________________________________________________________________
*
      call ecris_fst2(gz,l_minx,l_maxx,l_miny,l_maxy,Geomg_hyb,
     $        'GZ  ',prmult_pngz,0.0,5,F_nk, G_nk, 1, Out3_nbitg )
      deallocate ( gz )
*
      call mfottv (tt,vt,F_hut1, F_ninj,F_nk,F_ninj)
      call ecris_fst2(tt,l_minx,l_maxx,l_miny,l_maxy,Geomg_hyb,
     $        'TT  ',1.0,pradd_pntt, 5,F_nk, F_indo, F_nko, Out3_nbitg )
*
      return
      end
